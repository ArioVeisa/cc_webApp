pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'cc-webapp'
        DOCKER_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = 'simple-web-app'
        CI = 'true'
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'üì¶ Checking out source code...'
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'üì• Installing npm dependencies...'
                sh '''
                    #!/bin/bash -xe
                    npm ci --cache /tmp/.npm --no-optional
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo 'üß™ Running tests...'
                sh '''
                    #!/bin/bash -xe
                    npm run test:ci || true
                '''
            }
        }

        stage('Build Application') {
            steps {
                echo 'üèóÔ∏è Building React application...'
                sh '''
                    #!/bin/bash -xe
                    npm run build
                '''
                echo '‚úÖ Build completed successfully!'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Testing Docker access...'
                sh '''
                    #!/bin/bash -xe
                    docker version
                '''

                echo 'üèóÔ∏è Building Docker image on host...'
                sh '''
                    #!/bin/bash -xe
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                '''
                echo "‚úÖ Docker image built successfully: ${DOCKER_IMAGE}:${DOCKER_TAG}"
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                echo 'üöÄ Deploying application...'
                sh '''
                    #!/bin/bash -xe
                    docker stop ${CONTAINER_NAME} || true
                    docker rm -f ${CONTAINER_NAME} || true
                    docker-compose down --remove-orphans || true
                    docker-compose up -d --build
                '''
                echo '‚úÖ Application deployed successfully!'
            }
        }

        stage('Health Check') {
            steps {
                echo 'ü©∫ Performing health check...'
                sh '''
                    #!/bin/bash -xe
                    sleep 10
                    curl -f http://localhost:3000 --max-time 30
                '''
                echo '‚úÖ Health check passed! Application is running on port 3000'
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'üéâ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed! Check logs for details.'
        }
    }
}
