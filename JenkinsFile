pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'cc-webapp'
        DOCKER_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = 'cc-webapp-container'
        CI = 'true'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Check Docker') {
            steps {
                echo 'Checking Docker status...'
                sh 'docker --version || echo "Docker not found"'
                sh 'docker ps || echo "Docker daemon not running"'
                sh 'ls -la /var/run/docker.sock || echo "Docker socket not found"'
            }
        }
        
        stage('Build with Docker') {
            steps {
                echo 'Building application with Docker...'
                script {
                    try {
                        // Try direct docker build first
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                        echo "Docker image built successfully: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    } catch (Exception e) {
                        echo "Direct Docker build failed: ${e.getMessage()}"
                        echo "Trying Docker-in-Docker approach..."
                        
                        // Use Docker-in-Docker with privileged container
                        sh """
                            docker run --rm --privileged \\
                                -v /var/run/docker.sock:/var/run/docker.sock \\
                                -v \$(pwd):/workspace \\
                                -w /workspace \\
                                docker:20.10-dind \\
                                sh -c "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} . && docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                        """
                        echo "Docker image built successfully with Docker-in-Docker: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }
        
        stage('Deploy with Docker Compose') {
            steps {
                echo 'Deploying application...'
                sh "docker-compose down || true"
                sh "docker-compose up -d --build"
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Performing health check...'
                sh 'sleep 15'
                sh 'curl -f http://localhost:3000 --max-time 30 || exit 1'
                echo 'Health check passed! Application is running on port 3000'
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
            // Optional: Send notification
        }
        failure {
            echo 'Pipeline failed!'
            // Optional: Send failure notification
        }
    }
}