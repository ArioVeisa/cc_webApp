pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'cc-webapp'
        DOCKER_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = 'cc-webapp-container'
        CI = 'true'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Install Node.js') {
            steps {
                echo 'Installing Node.js...'
                sh 'curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - || echo "NodeSource setup failed"'
                sh 'sudo apt-get install -y nodejs || echo "Node.js install failed"'
                sh 'node --version || echo "Node.js not found"'
                sh 'npm --version || echo "npm not found"'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing npm dependencies...'
                sh 'npm install || echo "npm install failed"'
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Building React application...'
                sh 'npm run build || echo "Build failed"'
                echo 'Build completed successfully!'
            }
        }
        
        stage('Deploy Application') {
            steps {
                echo 'Deploying application...'
                sh 'npm install -g serve || echo "serve install failed"'
                sh 'pkill -f "serve -s build" || echo "No existing serve process"'
                sh 'nohup serve -s build -l 3000 > /dev/null 2>&1 &'
                echo 'Application deployed successfully!'
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Performing health check...'
                sh 'sleep 10'
                sh 'curl -f http://localhost:3000 --max-time 30 || exit 1'
                echo 'Health check passed! Application is running on port 3000'
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
            // Optional: Send notification
        }
        failure {
            echo 'Pipeline failed!'
            // Optional: Send failure notification
        }
    }
}